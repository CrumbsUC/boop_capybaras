import type { ConvertAmountJSON, CreatePaymentProductSessionResponseJSON, DirectoryJSON, PaymentProductGroupJSON, PaymentProductJSON, PaymentProductNetworksResponseJSON, ThirdPartyStatusResponseJSON, ApplePayInitResult, ApplePaySpecificInput, PaymentDetails, PaymentProductSessionContext, PaymentProductSpecificInputs, SessionDetails, GetPrivacyPolicyResponseJSON, GetPrivacyPolicyOptions } from './types';
import type { IinDetailsResponse } from './IinDetailsResponse';
import type { PublicKeyResponse } from './PublicKeyResponse';
import { BasicPaymentItems } from './BasicPaymentItems';
import { BasicPaymentProductGroups } from './BasicPaymentProductGroups';
import { BasicPaymentProducts } from './BasicPaymentProducts';
import { C2SCommunicatorConfiguration } from './C2SCommunicatorConfiguration';
import { Encryptor } from './Encryptor';
import { PaymentProduct } from './PaymentProduct';
import { PaymentProductGroup } from './PaymentProductGroup';
import { PaymentRequest } from './PaymentRequest';
export declare class Session {
    readonly clientApiUrl: C2SCommunicatorConfiguration['clientApiUrl'];
    readonly assetUrl: C2SCommunicatorConfiguration['assetUrl'];
    private readonly _c2SCommunicatorConfiguration;
    private readonly _c2sCommunicator;
    private readonly _paymentRequest;
    private _paymentDetails?;
    constructor(sessionDetails: SessionDetails, paymentProduct?: PaymentProductJSON | PaymentProductGroupJSON);
    /**
     * Returns an instance of `BasicPaymentProducts`.
     * This instance allows you to reference any basic payment product and
     * account on file that are configured for your account.
     */
    getBasicPaymentProducts(paymentDetails: PaymentDetails, paymentProductSpecificInputs?: PaymentProductSpecificInputs): Promise<BasicPaymentProducts>;
    /**
     * Returns an instance of `BasicPaymentProductGroups`.
     * This instance allows you to reference any basic payment product group and
     * account on file that are configured for your account.
     */
    getBasicPaymentProductGroups(paymentDetails: PaymentDetails): Promise<BasicPaymentProductGroups>;
    /**
     * Retrieve details of the payment products that are
     * configured for your account.
     */
    getBasicPaymentItems(paymentDetails: PaymentDetails, useGroups: boolean, paymentProductSpecificInputs?: PaymentProductSpecificInputs): Promise<BasicPaymentItems>;
    /**
     * Retrieve details of the payment product that is
     * configured for your account.
     */
    getPaymentProduct(paymentProductId: number, paymentDetails?: PaymentDetails, paymentProductSpecificInputs?: PaymentProductSpecificInputs): Promise<PaymentProduct>;
    /**
     * Retrieve details of the payment product group that is
     * configured for your account.
     */
    getPaymentProductGroup(paymentProductGroupId: string, paymentDetails?: PaymentDetails): Promise<PaymentProductGroup>;
    /**
     * Returns verified data that we can process a card from a certain Issuer
     * (by looking up the first six or more digits) and what the
     * best card type would be, based on your configuration
     */
    getIinDetails(partialCreditCardNumber: string, paymentDetails?: PaymentDetails | null): Promise<IinDetailsResponse>;
    /**
     * The crypto API allows you to retrieve a transaction specific public key
     * from our server that should be used to encrypt sensitive data, like card details.
     */
    getPublicKey(): Promise<PublicKeyResponse>;
    /**
     * Returns a lists of all the networks that can be used in
     * the current payment context for given payment product
     */
    getPaymentProductNetworks(paymentProductId: number, paymentDetails: PaymentDetails): Promise<PaymentProductNetworksResponseJSON>;
    /**
     * Returns a list of directory entries that can be used to populate the
     * GUI elements that allows the consumer to make the selection.
     */
    getPaymentProductDirectory(paymentProductId: number, currencyCode: string, countryCode: string): Promise<DirectoryJSON>;
    convertAmount(amount: number, source: string, target: string): Promise<ConvertAmountJSON>;
    /**
     * Retrieve the current payment request which is defined by the constructor.
     */
    getPaymentRequest(): PaymentRequest;
    /**
     * Returns the encryptor instance to encrypt data
     * with the public key and session id
     */
    getEncryptor(): Encryptor;
    /**
     * Returns the current third party status.
     */
    getThirdPartyPaymentStatus(paymentId: string): Promise<ThirdPartyStatusResponseJSON>;
    /**
     * Returns the privacy policy html for a specific or all payment products in your account
     * @see https://apireference.connect.worldline-solutions.com/c2sapi/v1/en_US/javascript/services/privacypolicy.html
     */
    getPrivacyPolicy(options?: GetPrivacyPolicyOptions): Promise<GetPrivacyPolicyResponseJSON>;
    /**
     * Creates a payment product session for the payment product.
     * Retrieve details of the payment products that are configured for your account.
     */
    createPaymentProductSession(paymentProductId: number, context: PaymentProductSessionContext): Promise<CreatePaymentProductSessionResponseJSON>;
    /**
     * Initialize Apple Pay payment
     */
    createApplePayPayment(context: PaymentDetails, paymentProductSpecificInput: ApplePaySpecificInput, networks: string[]): Promise<ApplePayInitResult>;
}
