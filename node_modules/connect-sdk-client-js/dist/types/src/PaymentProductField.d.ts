import type { PaymentProductFieldJSON } from './types';
import type { PaymentRequest } from './PaymentRequest';
import { DataRestrictions } from './DataRestrictions';
import { MaskedString } from './MaskedString';
import { PaymentProductFieldDisplayHints } from './PaymentProductFieldDisplayHints';
export declare class PaymentProductField {
    readonly json: PaymentProductFieldJSON;
    private _errorCodes;
    readonly displayHints?: PaymentProductFieldDisplayHints;
    readonly dataRestrictions?: DataRestrictions;
    readonly id: string;
    readonly type: string;
    constructor(json: PaymentProductFieldJSON);
    /**
     * @deprecated  This function does not take into account other fields that may be of importance for the validation.
     *              Use {@link PaymentProductField.getErrorMessageIds} instead.
     */
    getErrorCodes(value?: string): string[];
    getErrorMessageIds(request?: PaymentRequest): string[];
    /**
     * @deprecated This function does not take into account other fields that may be of importance for the validation.
     *             Use {@link PaymentProductField.validateValue} instead.
     */
    isValid(value: string): boolean;
    validateValue(request: PaymentRequest): boolean;
    applyMask(newValue: string, oldValue?: string): MaskedString;
    applyWildcardMask(newValue: string, oldValue?: string): MaskedString;
    removeMask(value: string): string;
}
