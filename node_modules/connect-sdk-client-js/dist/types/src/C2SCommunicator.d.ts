import type { BasicPaymentProductJSON, ConvertAmountJSON, CreatePaymentProductSessionResponseJSON, DirectoryJSON, GetIINDetailsRequestJSON, PaymentProductGroupJSON, PaymentProductGroupsJSON, PaymentProductJSON, PaymentProductNetworksResponseJSON, PaymentProductsJSON, ThirdPartyStatusResponseJSON, ApplePayInitResult, ApplePaySpecificInput, PaymentDetails, PaymentProductSessionContext, PaymentProductSpecificInputs, PaymentProductContext, GetPrivacyPolicyOptions, GetPrivacyPolicyResponseJSON } from './types';
import { ApplePay } from './ApplePay';
import { C2SCommunicatorConfiguration } from './C2SCommunicatorConfiguration';
import { GooglePay } from './GooglePay';
import { IinDetailsResponse } from './IinDetailsResponse';
import { PublicKeyResponse } from './PublicKeyResponse';
export declare class C2SCommunicator<PaymentProduct extends PaymentProductJSON | PaymentProductGroupJSON = PaymentProductJSON | PaymentProductGroupJSON> {
    readonly _providedPaymentProduct?: PaymentProduct | undefined;
    readonly _c2SCommunicatorConfiguration: C2SCommunicatorConfiguration;
    readonly _cache: Map<string, unknown>;
    readonly _googlePay: GooglePay;
    readonly _applePay: ApplePay;
    constructor(c2SCommunicatorConfiguration: C2SCommunicatorConfiguration, _providedPaymentProduct?: PaymentProduct | undefined);
    private _createCacheKeyFromContext;
    private _getBasePath;
    private _getUrlFromContext;
    private _getRequestHeaders;
    getBasicPaymentProducts(context: PaymentProductContext, paymentProductSpecificInputs?: PaymentProductSpecificInputs): Promise<PaymentProductsJSON>;
    getBasicPaymentProductGroups(context: PaymentProductContext): Promise<PaymentProductGroupsJSON>;
    getPaymentProduct(paymentProductId: number, context: PaymentProductContext, paymentProductSpecificInputs?: PaymentProductSpecificInputs): Promise<PaymentProductJSON>;
    getPaymentProductGroup(paymentProductGroupId: string, context: PaymentProductContext): Promise<PaymentProductGroupJSON>;
    getPaymentProductIdByCreditCardNumber(partialCreditCardNumber: string, context: PaymentProductContext): Promise<IinDetailsResponse>;
    convertContextToIinDetailsContext(partialCreditCardNumber: string, context: PaymentProductContext): GetIINDetailsRequestJSON;
    getPublicKey(): Promise<PublicKeyResponse>;
    getPaymentProductNetworks(paymentProductId: number, context: PaymentProductContext): Promise<PaymentProductNetworksResponseJSON>;
    getPaymentProductDirectory(paymentProductId: number, currencyCode: string, countryCode: string): Promise<DirectoryJSON>;
    convertAmount(amount: number, source: string, target: string): Promise<ConvertAmountJSON>;
    getThirdPartyPaymentStatus(paymentId: string): Promise<ThirdPartyStatusResponseJSON>;
    createPaymentProductSession(paymentProductId: BasicPaymentProductJSON['id'], context: PaymentProductSessionContext): Promise<CreatePaymentProductSessionResponseJSON>;
    initApplePayPayment(context: PaymentDetails, paymentProductSpecificInput: ApplePaySpecificInput, networks: string[]): Promise<ApplePayInitResult>;
    getPrivacyPolicy({ paymentProductId, locale, }: GetPrivacyPolicyOptions): Promise<GetPrivacyPolicyResponseJSON>;
    /**
     * Sanitize basic payment products
     *
     * - Format displayHints logo image url
     * - Sort by display order
     */
    private _sanitizeBasicPaymentProductsJson;
    /**
     * Returns a copied sanitized payment product (group) json response,
     * so it matches the result of `getPaymentProduct` and `getPaymentProductGroup`
     *
     * - add validators to fields
     * - Sort fields by display order
     * - format image urls (convert to absolute urls)
     */
    private _sanitizePaymentProductJSON;
}
