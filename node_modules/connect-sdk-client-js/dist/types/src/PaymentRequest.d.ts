import type { PaymentProductFieldJSON, ValidationError } from './types';
import { AccountOnFile } from './AccountOnFile';
import { PaymentProduct } from './PaymentProduct';
export declare class PaymentRequest {
    private readonly _fieldValues;
    private readonly _clientSessionID;
    private _paymentProduct?;
    private _accountOnFile?;
    private _tokenize;
    constructor(clientSessionID: string);
    private _getPaymentProductFieldById;
    setValue(paymentProductFieldId: PaymentProductFieldJSON['id'], value: string): void;
    setTokenize(tokenize: boolean): void;
    getTokenize(): boolean;
    /**
     * @deprecated  This function does not return for which field the errors are.
     *              Use {@link PaymentRequest.validate} instead.
     */
    getErrorMessageIds(): string[];
    getValue(paymentProductFieldId: string): string | undefined;
    getValues(): Record<string, string | undefined>;
    getMaskedValue(paymentProductFieldId: string): string | undefined;
    getMaskedValues(): Record<string, string | undefined>;
    getUnmaskedValue(paymentProductFieldId: string): string | undefined;
    getUnmaskedValues(): Record<string, string>;
    setPaymentProduct(paymentProduct: PaymentProduct): void;
    getPaymentProduct(): PaymentProduct | undefined;
    setAccountOnFile(accountOnFile?: AccountOnFile | null): void;
    getAccountOnFile(): AccountOnFile | undefined;
    getClientSessionID(): string;
    isValid(): boolean;
    /**
     * Validates that the necessary fields are set with correct values.
     * @throws If the payment product has not been set yet.
     */
    validate(): ValidationError[];
}
