/**
 * Returns true, if the url is an absolute or relative url with an extension
 */
declare function isUrlWithExtension(url: string): boolean;
/**
 * Add trailing slash when url is not an extension or contains a query string
 *
 * @example:
 * ```ts
 * addTrailingSlash('https://example.com') // => 'https://example.com/'
 * ```
 */
declare function addTrailingSlash(url: string): string;
/**
 * Format image url with base url
 */
declare function formatImageUrl(baseUrl: string, imageUrl: string): string;
/**
 * Convert multiple segments of a path into a single path
 *
 * @example:
 * ```ts
 * const segments = ['a/', 'b', 'c'];
 * const path = segmentsToPath(segments) => 'a/b/c'
 * ```
 */
declare function segmentsToPath(segments: string[]): string;
/**
 * Convert an object into a query string
 * Filter out falsy values
 *
 * @example:
 * ```ts
 * const obj = {
 *   a: 1,
 *   b: 2,
 *   c: false,
 *   d: null,
 *   e: undefined,
 *   f: 0,
 *   g: ''
 * };
 *
 * objectToQueryString(obj) // => 'a=1&b=2&f=0'
 * ```
 */
declare function objectToQueryString(obj: Record<string, string | number | undefined | boolean>): string;
/**
 * Construct url with optional query string
 *
 * @example:
 * ```ts
 * const url = urlWithQueryString('https://example.com,' { a: 1, b: 2 }) // => 'https://example.com?a=1&b=2'
 * ```
 */
declare function urlWithQueryString(basePath: string, query: Record<string, string | number | undefined | boolean>): string;
export declare const url: {
    isUrlWithExtension: typeof isUrlWithExtension;
    addTrailingSlash: typeof addTrailingSlash;
    formatImageUrl: typeof formatImageUrl;
    segmentsToPath: typeof segmentsToPath;
    objectToQueryString: typeof objectToQueryString;
    urlWithQueryString: typeof urlWithQueryString;
};
export {};
